"use server";

import { revalidatePath } from "next/cache";
import { z } from "zod";
import { supabaseAdmin } from "@/lib/supabase/server";
// If you want to record who created something later, you can also:
// import { auth } from "@clerk/nextjs/server";

/* ---------------- Procedures ---------------- */

const procedureSchema = z.object({
  name: z.string().min(3, "Procedure name must be at least 3 characters."),
  area: z.string().min(2, "Anatomical area is required."),
  // NOTE: Your DB column is a USER-DEFINED type.
  // Ensure these values match your Postgres enum/domain exactly.
  type: z.enum(["Therapeutic", "Aesthetic"]),
  description: z.string().optional(),
});

export async function createProcedure(formData: FormData) {
  // const { userId } = await auth(); // keep for Track B if you want to stamp creator
  const validated = procedureSchema.safeParse({
    name: formData.get("name"),
    area: formData.get("area"),
    type: formData.get("type"),
    description: formData.get("description"),
  });

  if (!validated.success) {
    return { error: "Invalid fields.", details: validated.error.flatten() };
  }

  const { error } = await supabaseAdmin
    .from("procedures")
    .insert([validated.data]); // For Track B, add { clerk_user_id: userId } if you add that column

  if (error) {
    console.error("Supabase error:", error);
    return { error: "Failed to create procedure." };
  }

  revalidatePath("/dashboard/atlas/procedures");
  return { success: "Procedure created successfully!" };
}

/* ---------------- Muscles ---------------- */

const muscleSchema = z.object({
  name: z.string().min(2, "Muscle name is required."),
  anatomical_region: z.string().optional(),
  function: z.string().optional(),
});

export async function createMuscle(formData: FormData) {
  const validated = muscleSchema.safeParse(Object.fromEntries(formData));

  if (!validated.success) {
    return { error: "Invalid fields.", details: validated.error.flatten() };
  }

  const { error } = await adminSupabase
    .from("muscles")
    .insert([validated.data]);

  if (error) {
    console.error("Supabase error:", error);
    return { error: "Failed to create muscle." };
  }

  revalidatePath("/dashboard/atlas/muscles");
  return { success: "Muscle added successfully!" };
}
